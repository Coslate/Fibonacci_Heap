rm -rf ../exec_output/Fibonacci_Heap.o
rm -rf ../exec_output/Fibonacci_Heap_main.o
rm -rf ./tags
g++ -g -Wall -O3  -c Fibonacci_Heap.cpp -I ./include -o ../exec_output/Fibonacci_Heap.o
ctags -R ./*
ctags -a ./include/*
g++ -g -Wall -O3  -I ./include ../exec_output/Fibonacci_Heap.o Fibonacci_Heap_main.cpp -o ../exec_output/Fibonacci_Heap_main.o
../exec_output/Fibonacci_Heap_main.o
=====================================H1=========================================
(7, 0x1c51010)
(17, 0x1c51050)
(30, 0x1c51090)
(3, 0x1c510d0)
(18, 0x1c51110)
(52, 0x1c51150)
(38, 0x1c51190)
(39, 0x1c511d0)
(41, 0x1c51210)
(42, 0x1c51250)
(43, 0x1c51290)
(44, 0x1c512d0)
(69, 0x1c51310)
##################################
#########      F0      ###########
##################################
(  7, 0x1c51010,   0)
##################################
#########      F1      ###########
##################################
(  3, 0x1c510d0,   3)
-------------------------------------
(  3, 0x1c510d0,   3)--> ( 52, 0x1c51150,   0)--( 38, 0x1c51190,   1)--( 18, 0x1c51110,   1)
-------------------------------------
( 38, 0x1c51190,   1)--> ( 41, 0x1c51210,   1)
( 18, 0x1c51110,   1)--> ( 39, 0x1c511d0,   1)
-------------------------------------
( 41, 0x1c51210,   1)--> ( 42, 0x1c51250,   1)
( 39, 0x1c511d0,   1)--> ( 69, 0x1c51310,   0)
-------------------------------------
( 42, 0x1c51250,   1)--> ( 43, 0x1c51290,   1)
-------------------------------------
( 43, 0x1c51290,   1)--> ( 44, 0x1c512d0,   0)
##################################
#########      F2      ###########
##################################
( 17, 0x1c51050,   1)
-------------------------------------
( 17, 0x1c51050,   1)--> ( 30, 0x1c51090,   0)
##################################
#########      F3      ###########
##################################
( 24, 0x1c51350,   2)
-------------------------------------
( 24, 0x1c51350,   2)--> ( 26, 0x1c51390,   1)--( 46, 0x1c513d0,   0)
-------------------------------------
( 26, 0x1c51390,   1)--> ( 35, 0x1c51410,   0)
H1.total_node_num = 17
H1.root_list_size = 4
H1.head = 0x1c51010
H1.tail = 0x1c51350
H1.min_pointer = (3, 0x1c510d0)
=====================================H2=========================================
##################################
#########      F0      ###########
##################################
( 15, 0x1c51660,   0)
##################################
#########      F1      ###########
##################################
( 33, 0x1c516a0,   0)
##################################
#########      F2      ###########
##################################
( 10, 0x1c51510,   0)
H2.total_node_num = 3
H2.root_list_size = 3
H2.head = 0x1c51660
H2.tail = 0x1c51510
H2.min_pointer = (10, 0x1c51510)
=====================================H2.Union(H3)=========================================
##################################
#########      F0      ###########
##################################
( 15, 0x1c51660,   0)
##################################
#########      F1      ###########
##################################
( 33, 0x1c516a0,   0)
##################################
#########      F2      ###########
##################################
( 10, 0x1c51510,   0)
H2.total_node_num = 3
H2.root_list_size = 3
H2.head = 0x1c51660
H2.tail = 0x1c51510
H2.min_pointer = (10, 0x1c51510)
=====================================H3=========================================
##################################
#########      F0      ###########
##################################
(  2, 0x1c51800,   0)
##################################
#########      F1      ###########
##################################
( 99, 0x1c51840,   0)
##################################
#########      F2      ###########
##################################
(  1, 0x1c517c0,   0)
H3.total_node_num = 3
H3.root_list_size = 3
H3.head = 0x1c51800
H3.tail = 0x1c517c0
H3.min_pointer = (1, 0x1c517c0)
=====================================H2.Union(H3)=========================================
##################################
#########      F0      ###########
##################################
( 15, 0x1c51660,   0)
##################################
#########      F1      ###########
##################################
( 33, 0x1c516a0,   0)
##################################
#########      F2      ###########
##################################
( 10, 0x1c51510,   0)
##################################
#########      F3      ###########
##################################
(  2, 0x1c51800,   0)
##################################
#########      F4      ###########
##################################
( 99, 0x1c51840,   0)
##################################
#########      F5      ###########
##################################
(  1, 0x1c517c0,   0)
H2.total_node_num = 6
H2.root_list_size = 6
H2.head = 0x1c51660
H2.tail = 0x1c517c0
H2.min_pointer = (1, 0x1c517c0)
=====================================H2.ExtractMin()=========================================
##################################
#########      F0      ###########
##################################
( 99, 0x1c51840,   0)
##################################
#########      F1      ###########
##################################
(  2, 0x1c51800,   2)
-------------------------------------
(  2, 0x1c51800,   2)--> ( 10, 0x1c51510,   0)--( 15, 0x1c51660,   1)
-------------------------------------
( 15, 0x1c51660,   1)--> ( 33, 0x1c516a0,   0)
H2.total_node_num = 5
H2.root_list_size = 2
H2.head = 0x1c51840
H2.tail = 0x1c51800
H2.min_pointer = (2, 0x1c51800)
extracted_min = (1, 0x1c517c0)
=====================================H4=========================================
##################################
#########      F0      ###########
##################################
(200, 0x1c51a00,   0)
H4.total_node_num = 1
H4.root_list_size = 1
H4.head = 0x1c51a00
H4.tail = 0x1c51a00
H4.min_pointer = (200, 0x1c51a00)
=====================================H4.Union(H3)=========================================
##################################
#########      F0      ###########
##################################
(200, 0x1c51a00,   0)
H4.total_node_num = 1
H4.root_list_size = 1
H4.head = 0x1c51a00
H4.tail = 0x1c51a00
H4.min_pointer = (200, 0x1c51a00)
=====================================H4.ExtractMin()=========================================
H4.total_node_num = 0
H4.root_list_size = 0
H4.head = 0
H4.tail = 0
extracted_min = (200, 0x1c51a00)
=====================================H5=========================================
##################################
#########      F0      ###########
##################################
(200, 0x1c51a00,   0)
H5.total_node_num = 1
H5.root_list_size = 1
H5.head = 0x1c51a00
H5.tail = 0x1c51a00
H5.min_pointer = (200, 0x1c51a00)
=====================================H5.Union(H2)=========================================
##################################
#########      F0      ###########
##################################
(200, 0x1c51a00,   0)
##################################
#########      F1      ###########
##################################
( 99, 0x1c51840,   0)
##################################
#########      F2      ###########
##################################
(  2, 0x1c51800,   2)
-------------------------------------
(  2, 0x1c51800,   2)--> ( 10, 0x1c51510,   0)--( 15, 0x1c51660,   1)
-------------------------------------
( 15, 0x1c51660,   1)--> ( 33, 0x1c516a0,   0)
H5.total_node_num = 6
H5.root_list_size = 3
H5.head = 0x1c51a00
H5.tail = 0x1c51800
H5.min_pointer = (2, 0x1c51800)
=====================================H5.ExtractMin()=========================================
##################################
#########      F0      ###########
##################################
( 10, 0x1c51510,   0)
##################################
#########      F1      ###########
##################################
( 15, 0x1c51660,   2)
-------------------------------------
( 15, 0x1c51660,   2)--> ( 33, 0x1c516a0,   0)--( 99, 0x1c51840,   1)
-------------------------------------
( 99, 0x1c51840,   1)--> (200, 0x1c51a00,   0)
H5.total_node_num = 5
H5.root_list_size = 2
H5.head = 0x1c51510
H5.tail = 0x1c51660
H5.min_pointer = (10, 0x1c51510)
extracted_min = (2, 0x1c51800)
It is destructor.
It is destructor.
It is destructor.
It is destructor.
It is destructor.
